// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// InviteTokenGenerateHandlerFunc turns a function with the right signature into a invite token generate handler
type InviteTokenGenerateHandlerFunc func(InviteTokenGenerateParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn InviteTokenGenerateHandlerFunc) Handle(params InviteTokenGenerateParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// InviteTokenGenerateHandler interface for that can handle valid invite token generate params
type InviteTokenGenerateHandler interface {
	Handle(InviteTokenGenerateParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewInviteTokenGenerate creates a new http.Handler for the invite token generate operation
func NewInviteTokenGenerate(ctx *middleware.Context, handler InviteTokenGenerateHandler) *InviteTokenGenerate {
	return &InviteTokenGenerate{Context: ctx, Handler: handler}
}

/*
	InviteTokenGenerate swagger:route POST /invite/token/generate admin inviteTokenGenerate

InviteTokenGenerate invite token generate API
*/
type InviteTokenGenerate struct {
	Context *middleware.Context
	Handler InviteTokenGenerateHandler
}

func (o *InviteTokenGenerate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewInviteTokenGenerateParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// InviteTokenGenerateBody invite token generate body
//
// swagger:model InviteTokenGenerateBody
type InviteTokenGenerateBody struct {

	// invite tokens
	InviteTokens []string `json:"inviteTokens"`
}

// Validate validates this invite token generate body
func (o *InviteTokenGenerateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invite token generate body based on context it is used
func (o *InviteTokenGenerateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InviteTokenGenerateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InviteTokenGenerateBody) UnmarshalBinary(b []byte) error {
	var res InviteTokenGenerateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
