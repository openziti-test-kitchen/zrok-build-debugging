// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ClientVersionCheckOKCode is the HTTP code returned for type ClientVersionCheckOK
const ClientVersionCheckOKCode int = 200

/*
ClientVersionCheckOK compatible

swagger:response clientVersionCheckOK
*/
type ClientVersionCheckOK struct {
}

// NewClientVersionCheckOK creates ClientVersionCheckOK with default headers values
func NewClientVersionCheckOK() *ClientVersionCheckOK {

	return &ClientVersionCheckOK{}
}

// WriteResponse to the client
func (o *ClientVersionCheckOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ClientVersionCheckBadRequestCode is the HTTP code returned for type ClientVersionCheckBadRequest
const ClientVersionCheckBadRequestCode int = 400

/*
ClientVersionCheckBadRequest not compatible

swagger:response clientVersionCheckBadRequest
*/
type ClientVersionCheckBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewClientVersionCheckBadRequest creates ClientVersionCheckBadRequest with default headers values
func NewClientVersionCheckBadRequest() *ClientVersionCheckBadRequest {

	return &ClientVersionCheckBadRequest{}
}

// WithPayload adds the payload to the client version check bad request response
func (o *ClientVersionCheckBadRequest) WithPayload(payload string) *ClientVersionCheckBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client version check bad request response
func (o *ClientVersionCheckBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientVersionCheckBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
