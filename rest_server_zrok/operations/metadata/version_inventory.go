// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VersionInventoryHandlerFunc turns a function with the right signature into a version inventory handler
type VersionInventoryHandlerFunc func(VersionInventoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VersionInventoryHandlerFunc) Handle(params VersionInventoryParams) middleware.Responder {
	return fn(params)
}

// VersionInventoryHandler interface for that can handle valid version inventory params
type VersionInventoryHandler interface {
	Handle(VersionInventoryParams) middleware.Responder
}

// NewVersionInventory creates a new http.Handler for the version inventory operation
func NewVersionInventory(ctx *middleware.Context, handler VersionInventoryHandler) *VersionInventory {
	return &VersionInventory{Context: ctx, Handler: handler}
}

/*
	VersionInventory swagger:route GET /versions metadata versionInventory

VersionInventory version inventory API
*/
type VersionInventory struct {
	Context *middleware.Context
	Handler VersionInventoryHandler
}

func (o *VersionInventory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVersionInventoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// VersionInventoryOKBody version inventory o k body
//
// swagger:model VersionInventoryOKBody
type VersionInventoryOKBody struct {

	// controller version
	ControllerVersion string `json:"controllerVersion,omitempty"`
}

// Validate validates this version inventory o k body
func (o *VersionInventoryOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this version inventory o k body based on context it is used
func (o *VersionInventoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VersionInventoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VersionInventoryOKBody) UnmarshalBinary(b []byte) error {
	var res VersionInventoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
