// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClientVersionCheckHandlerFunc turns a function with the right signature into a client version check handler
type ClientVersionCheckHandlerFunc func(ClientVersionCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientVersionCheckHandlerFunc) Handle(params ClientVersionCheckParams) middleware.Responder {
	return fn(params)
}

// ClientVersionCheckHandler interface for that can handle valid client version check params
type ClientVersionCheckHandler interface {
	Handle(ClientVersionCheckParams) middleware.Responder
}

// NewClientVersionCheck creates a new http.Handler for the client version check operation
func NewClientVersionCheck(ctx *middleware.Context, handler ClientVersionCheckHandler) *ClientVersionCheck {
	return &ClientVersionCheck{Context: ctx, Handler: handler}
}

/*
	ClientVersionCheck swagger:route POST /clientVersionCheck metadata clientVersionCheck

ClientVersionCheck client version check API
*/
type ClientVersionCheck struct {
	Context *middleware.Context
	Handler ClientVersionCheckHandler
}

func (o *ClientVersionCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewClientVersionCheckParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientVersionCheckBody client version check body
//
// swagger:model ClientVersionCheckBody
type ClientVersionCheckBody struct {

	// client version
	ClientVersion string `json:"clientVersion,omitempty"`
}

// Validate validates this client version check body
func (o *ClientVersionCheckBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this client version check body based on context it is used
func (o *ClientVersionCheckBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ClientVersionCheckBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientVersionCheckBody) UnmarshalBinary(b []byte) error {
	var res ClientVersionCheckBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
