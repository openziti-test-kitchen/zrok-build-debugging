// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoginReader is a Reader for the Login structure.
type LoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /login] login", response, response.Code())
	}
}

// NewLoginOK creates a LoginOK with default headers values
func NewLoginOK() *LoginOK {
	return &LoginOK{}
}

/*
LoginOK describes a response with status code 200, with default header values.

login successful
*/
type LoginOK struct {
	Payload string
}

// IsSuccess returns true when this login o k response has a 2xx status code
func (o *LoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login o k response has a 3xx status code
func (o *LoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login o k response has a 4xx status code
func (o *LoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login o k response has a 5xx status code
func (o *LoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login o k response a status code equal to that given
func (o *LoginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login o k response
func (o *LoginOK) Code() int {
	return 200
}

func (o *LoginOK) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) String() string {
	return fmt.Sprintf("[POST /login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) GetPayload() string {
	return o.Payload
}

func (o *LoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUnauthorized creates a LoginUnauthorized with default headers values
func NewLoginUnauthorized() *LoginUnauthorized {
	return &LoginUnauthorized{}
}

/*
LoginUnauthorized describes a response with status code 401, with default header values.

invalid login
*/
type LoginUnauthorized struct {
}

// IsSuccess returns true when this login unauthorized response has a 2xx status code
func (o *LoginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login unauthorized response has a 3xx status code
func (o *LoginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login unauthorized response has a 4xx status code
func (o *LoginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login unauthorized response has a 5xx status code
func (o *LoginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login unauthorized response a status code equal to that given
func (o *LoginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login unauthorized response
func (o *LoginUnauthorized) Code() int {
	return 401
}

func (o *LoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginUnauthorized ", 401)
}

func (o *LoginUnauthorized) String() string {
	return fmt.Sprintf("[POST /login][%d] loginUnauthorized ", 401)
}

func (o *LoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
LoginBody login body
swagger:model LoginBody
*/
type LoginBody struct {

	// email
	Email string `json:"email,omitempty"`

	// password
	Password string `json:"password,omitempty"`
}

// Validate validates this login body
func (o *LoginBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this login body based on context it is used
func (o *LoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginBody) UnmarshalBinary(b []byte) error {
	var res LoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
